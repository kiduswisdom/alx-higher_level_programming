# 0-add_integer.txt
# Author: Sangwani P. Zyambo <sangwanizyambo@gmail.com>

=========================
Using 0-add_integer.py
This module defines a function that returns the sum of its two arguments
=========================


# Prototype: def ''add_integer(a, b=98)''

	param: a(int): The first operand must be int if float typecast
	 it to int.
	param: b(int): Second operand with a default value of 98,
	 if its a float	typecast it to int.
	return: the sume of argument a and b.
	---------------------------
===========
Usage
============

Pass in integers

	>>> add_integer = __import__("0-add_integer").add_integer
	>>> add_integer(1, 2)
	3

If one argument is passed it wil be added to 98 the default value of b.

	>>> add_integer(2)
	100

Pass in different data types (floats and ints)
	>>> add_integer(100.3, -2)
	98

	>>> add_integer(60, 35.4)
	95

Pass in floats
	>>> add_integer(180.876, 65.5643)
	245

===========
TypeErrors
===========
Function does not take in string data types
	>>> add_integer(4, "School")
	Traceback (most recent call last):
		...
	TypeError: b must be an integer

	>>> add_integer("Great", 6)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Function does not take None data type
	>>> add_integer(None)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer
	
	>>> add_integer("best", "school")
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

=============
ValueErrors
=============

Cannot convert float Nan to integer
	>>> add_integer(float('NaN'))
	Traceback (most recent call last):
		...
	ValueError: cannot convert float NaN to integer

===============
OverFlowErrors
===============

If the function receives positive 'inf' or negative 'inf'
	>>> add_integer(float('inf'))
	Traceback (most recent call last):
		...
	OverflowError: cannot convert float infinity to integer
	
	>>> add_integer(-float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer
